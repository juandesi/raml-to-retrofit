#%RAML 0.8
title: Twitter API
version: 1.1
baseUri: https://api.twitter.com/{version}/
mediaType: application/json
securitySchemes:
  - oauth_1_0: !include securitySchemes/oauth_1_0.raml
schemas:
  - tweets: !include schemas/tweets-schema.json
  - friendships-no_retweets-ids: !include schemas/friendships-no_retweets-ids-schema.json
  - followers-ids: !include schemas/followers-ids-schema.json
  - ids: !include schemas/ids-schema.json
  - friendships-update: !include schemas/friendships-update-schema.json
  - friends-list: !include schemas/friends-list-schema.json
  - account-settings: !include schemas/account-settings-schema.json
  - account-verify_credentials: !include schemas/account-verify_credentials-schema.json
  - account-update_background: !include schemas/account-update_background-schema.json
  - account-update_profile_colors: !include schemas/account-update_profile_colors-schema.json
  - account-update_profile_image: !include schemas/account-update_profile_image-schema.json
  - blocks-list: !include schemas/blocks-list-schema.json
  - blocks-ids: !include schemas/blocks-ids-schema.json
  - blocks-create: !include schemas/blocks-create-schema.json
  - users: !include schemas/users-schema.json
  - users-profile-banner: !include schemas/users-profile-banner-schema.json
  - user-suggestions: !include schemas/user-suggestions-schema.json
  - users-suggestion: !include schemas/users-suggestion-schema.json
  - lists: !include schemas/lists-schema.json
  - list: !include schemas/list-schema.json
  - saved_searches: !include schemas/saved_searches-schema.json
  - saved_search: !include schemas/saved_search-schema.json
  - geo-id: !include schemas/geo-id-schema.json
  - trends: !include schemas/trends-schema.json
  - trends-available: !include schemas/trends-available-schema.json
  - help-config: !include schemas/help-config-schema.json
  - help-languages: !include schemas/help-languages-schema.json
  - rate_limits: !include schemas/rate_limits-schema.json
  - privacy: !include schemas/privacy-schema.json
  - tos: !include schemas/tos-schema.json
resourceTypes:
  - idsType: !include resourceTypes/idsType.raml
  - geoIdType: !include resourceTypes/geoIdType.raml
  - base: !include resourceTypes/base.raml
  - usersType: !include resourceTypes/usersType.raml
  - tweetsType: !include resourceTypes/tweetsType.raml
traits:
  - acceptsListId: !include traits/acceptsListId.raml
  - acceptsListOwner: !include traits/acceptsListOwner.raml
  - acceptsUsers: !include traits/acceptsUsers.raml
  - acceptsUser: !include traits/acceptsUser.raml
  - limitableByPlace: !include traits/limitableByPlace.raml
  - canProvideJsonP: !include traits/canProvideJsonP.raml
  - pageAble: !include traits/pageAble.raml
  - canStringifyIds: !include traits/canStringifyIds.raml
  - acceptUserThroughForm: !include traits/acceptUserThroughForm.raml
  - geoLimitable: !include traits/geoLimitable.raml
  - canExcludeStatus: !include traits/canExcludeStatus.raml
  - canSkipStatus: !include traits/canSkipStatus.raml
  - canBeDelimeted: !include traits/canBeDelimeted.raml
  - canExcludeReplies: !include traits/canExcludeReplies.raml
  - nestedable: !include traits/nestedable.raml
  - contibutorCanBeDetailed: !include traits/contibutorCanBeDetailed.raml
  - trimmable: !include traits/trimmable.raml
  - canTrimUser: !include traits/canTrimUser.raml
  - limitableById: !include traits/limitableById.raml
  - owned: !include traits/owned.raml
  - limitableByCount: !include traits/limitableByCount.raml
  - requiresScreenName: !include traits/requiresScreenName.raml
  - canExcludeEntities: !include traits/canExcludeEntities.raml
  - acceptPlaceAccuracy: !include traits/acceptPlaceAccuracy.raml
  - needsList: !include traits/needsList.raml
  - canIncludeUserEntries: !include traits/canIncludeUserEntries.raml
  - idsCanBeStringified: !include traits/idsCanBeStringified.raml
securedBy: [ oauth_1_0 ]
/search/tweets{mediaTypeExtension}: 
  type: tweetsType
  get: 
    is: [ nestedable , limitableById , canProvideJsonP , limitableByCount: { max: 1000 } ]
    description: |
      Returns a collection of relevant Tweets matching a specified query.
    queryParameters: 
      q: 
        description: |
          A UTF-8, URL-encoded search query of 1,000 characters maximum,
          including operators. Queries may additionally be limited by complexity.
        required: true
        maxLength: 1000
      geocode: 
        description: |
          Returns tweets by users located within a given radius of the given
          latitude/longitude. The location is preferentially taking from the
          Geotagging API, but will fall back to their Twitter profile. The
          parameter value is specified by "latitude,longitude,radius", where
          radius units must be specified as either "mi" (miles) or "km" (kilometers).
          Note that you cannot use the near operator via the API to geocode arbitrary
          locations; however you can use this geocode parameter to search near geocodes
          directly. A maximum of 1,000 distinct "sub-regions" will be considered when
          using the radius modifier.
      lang: 
        description: |
          Restricts tweets to the given language, given by an ISO 639-1 code.
          Language detection is best-effort.
        maxLength: 2
      locale: 
        description: |
          Specify the language of the query you are sending (only ja is currently
          effective). This is intended for language-specific consumers and the
          default should work in the majority of cases.
        example: ja
      result_type: 
        description: |
          Specifies what type of search results you would prefer to receive. The
          current default is "mixed." Valid values include
           * mixed: Include both popular and real time results in the response.
           * recent: return only the most recent results in the response
           * popular: return only the most popular results in the response.
        enum: 
          - mixed
          - recen
          - popular
        default: mixed
      until: 
        description: |
          Returns tweets generated before the given date. Date should be formatted
          as YYYY-MM-DD. Keep in mind that the search index may not go back as far
          as the date you specify here.
    responses:
      200:
        body:
          application/json:
            example: !include examples/search-tweets-example.json
/direct_messages{mediaTypeExtension}: 
  type: tweetsType
  get: 
    is: [ nestedable , canExcludeStatus , limitableById , limitableByCount: { max: 200 } ]
    description: |
      Returns the 20 most recent direct messages sent to the authenticating user.
      Includes detailed information about the sender and recipient user. You can
      request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.
      Important: This method requires an access token with RWD (read, write & direc
      message) permissions. Consult The Application Permission Model for more
      information. (https://dev.twitter.com/docs/application-permission-model)
    responses:
      200:
        body:
          application/json:
            example: !include examples/direct_messages-example.json
/direct_messages: 
  /sent{mediaTypeExtension}: 
    type: tweetsType
    get: 
      is: [ nestedable , limitableById , limitableByCount: { max: 200 } ]
      description: |
        Returns the 20 most recent direct messages sent by the authenticating user.
        Includes detailed information about the sender and recipient user. You can
        request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.
        Important: This method requires an access token with RWD (read, write &
        direct message) permissions. Consult The Application Permission Model for
        more information.
      queryParameters: 
        page: 
          description: Specifies the page of results to retrieve.
          type: integer
      responses:
        200:
          body:
            application/json:
              example: !include examples/direct_messages-sent-example.json
  /show{mediaTypeExtension}: 
    type: tweetsType
    get: 
      description: |
        Returns a single direct message, specified by an id parameter. Like the
        /1.1/direct_messages.format request, this method will include the user
        objects of the sender and recipient.
        Important: This method requires an access token with RWD (read, write &
        direct message) permissions. Consult The Application Permission Model for
        more information.
      queryParameters: 
        id: 
          description: The ID of the direct message.
          type: integer
          required: true
      responses:
        200:
          body:
            application/json:
              example: !include examples/direct_messages-show-example.json
  /destroy{mediaTypeExtension}: 
    type: tweetsType
    post: 
      is: [ canExcludeEntities ]
      description: |
        Destroys the direct message specified in the required ID parameter. The
        authenticating user must be the recipient of the specified direct message.
        Important: This method requires an access token with RWD (read, write &
        direct message) permissions. Consult The Application Permission Model for
        more information.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            id: 
              description: The ID of the direct message.
              type: integer
              required: true
      responses:
        200:
          body:
            application/json:
              example: !include examples/direct_messages-destroy-example.json
  /new{mediaTypeExtension}: 
    type: tweetsType
    post: 
      is: [ acceptUserThroughForm ]
      description: |
        Sends a new direct message to the specified user from the authenticating user.
        Requires both the user and text parameters and must be a POST. Returns the
        sent message in the requested format if successful.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            text: 
              description: |
                The text of your direct message. Be sure to URL encode as necessary,
                and keep the message under 140 characters.
              required: true
              maxLength: 140
      responses:
        200:
          body:
            application/json:
              example: !include examples/direct_messages-new-example.json 
/friendships: 
  /no_retweets/ids{mediaTypeExtension}: 
    type: base
    get: 
      is: [ canStringifyIds ]
      description: |
        Returns a collection of user_ids that the currently authenticated user does
        not want to receive retweets from.
        Use POST friendships/update to set the "no retweets" status for a given user
        account on behalf of the current user.
      responses: 
        200: 
          body: 
            application/json: 
              schema: friendships-no_retweets-ids
              example: !include examples/friendships-no_retweets-ids-example.json
  /lookup{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUsers ]
      description: |
        Returns the relationships of the authenticating user to the comma-separated
        list of up to 100 screen_names or user_ids provided. Values for connections
        can be: following, following_requested, followed_by, none.
      responses: 
        200: 
          body: 
            application/json: 
              schema: followers-ids
              example: !include examples/followers-ids-example.json
  /incoming{mediaTypeExtension}: 
    type: idsType
    get: 
      is: [ pageAble , canStringifyIds ]
      description: |
        Returns a collection of numeric IDs for every user who has a pending reques
        to follow the authenticating user.
  /outgoing{mediaTypeExtension}: 
    type: idsType
    get: 
      is: [ pageAble , idsCanBeStringified ]
      description: |
        Returns a collection of numeric IDs for every protected user for whom the
        authenticating user has a pending follow request.
  /create{mediaTypeExtension}: 
    type: tweetsType
    post: 
      is: [ acceptUserThroughForm ]
      description: |
        Allows the authenticating users to follow the user specified in the ID
        parameter.
        Returns the befriended user in the requested format when successful. Returns
        a string describing the failure condition when unsuccessful. If you are
        already friends with the user a HTTP 403 may be returned, though for performance
        reasons you may get a 200 OK message even if the friendship already exists.
        Actions taken in this method are asynchronous and changes will be eventually
        consistent.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            follow: 
              description: Enable notifications for the target user.
              type: boolean
      responses:
        200:
          body:
            application/json: 
              example: !include examples/friendships-create-example.json  
        403: 
          description: If you are already friends with the user.
      
  /destroy{mediaTypeExtension}: 
    type: tweetsType
    post: 
      is: [ acceptUserThroughForm ]
      description: |
        Allows the authenticating user to unfollow the user specified in the ID
        parameter.
        Returns the unfollowed user in the requested format when successful. Returns
        a string describing the failure condition when unsuccessful.
        Actions taken in this method are asynchronous and changes will be eventually
        consistent.
      responses:
        200:
          body:
            application/json: 
              example: !include examples/friendships-destroy-example.json
  /update{mediaTypeExtension}: 
    type: base
    post: 
      is: [ acceptUserThroughForm ]
      description: |
        Allows one to enable or disable retweets and device notifications from the
        specified user.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            device: 
              description: Enable/disable device notifications from the target user.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
            retweets: 
              description: Enable/disable retweets from the target user.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
      responses: 
        200: 
          body: 
            application/json: 
              schema: friendships-update
              example: !include examples/friendships-update-example.json
  /show{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns detailed information about the relationship between two arbitrary
        users.
      queryParameters: 
        source_id: 
          description: The user_id of the subject user.
          type: integer
        source_screen_name: 
          description: The screen_name of the subject user.
        target_id: 
          description: The user_id of the target user.
          type: integer
        target_screen_name: 
          description: The screen_name of the target user.
      responses: 
        200: 
          body: 
            application/json: 
              schema: friendships-update
              example: !include examples/friendships-update-example.json
/friends: 
  /ids{mediaTypeExtension}: 
    type: idsType
    get: 
      is: [ acceptsUser , pageAble , idsCanBeStringified , limitableByCount: { max: 5000 } ]
      description: |
        Returns a cursored collection of user IDs for every user the specified user
        is following (otherwise known as their "friends").
        At this time, results are ordered with the most recent following first  however,
        this ordering is subject to unannounced change and eventual consistency issues.
        Results are given in groups of 5,000 user IDs and multiple "pages" of results
        can be navigated through using the next_cursor value in subsequent requests.
        See Using cursors to navigate collections for more information.
        This method is especially powerful when used in conjunction with
        'GET users/lookup', a method that allows you to convert user IDs into full
        user objects in bulk.
  /list{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUser , canExcludeStatus , pageAble , canIncludeUserEntries ]
      description: |
        Returns a cursored collection of user objects for every user the specified
        user is following (otherwise known as their "friends").
        At this time, results are ordered with the most recent following first
        however, this ordering is subject to unannounced change and eventual consistency
        issues. Results are given in groups of 20 users and multiple "pages" of results
        can be navigated through using the next_cursor value in subsequent requests.
        See Using cursors to navigate collections for more information.
      responses: 
        200: 
          body: 
            application/json: 
              schema: friends-list
              example: !include examples/friends-list-example.json
/followers: 
  /ids{mediaTypeExtension}: 
    type: idsType
    get: 
      is: [ acceptsUser , pageAble , idsCanBeStringified , limitableByCount: { max: 5000 } ]
      description: |
        Returns a cursored collection of user IDs for every user following the
        specified user.
        At this time, results are ordered with the most recent following first
        however, this ordering is subject to unannounced change and eventual
        consistency issues. Results are given in groups of 5,000 user IDs and
        multiple "pages" of results can be navigated through using the next_cursor
        value in subsequent requests. See Using cursors to navigate collections
        for more information.
  /list{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUser , canExcludeStatus , pageAble , canIncludeUserEntries ]
      description: |
        Returns a cursored collection of user objects for users following the
        specified user.
        At this time, results are ordered with the most recent following first
        however, this ordering is subject to unannounced change and eventual
        consistency issues. Results are given in groups of 20 users and multiple
        "pages" of results can be navigated through using the next_cursor value in
        subsequent requests. See Using cursors to navigate collections for more
        information.
      responses: 
        200: 
          body: 
            application/json: 
              schema: friends-list
              example: !include examples/friends-list-example.json
/account: 
  /settings{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns settings (including current trend, geo and sleep time information)
        for the authenticating user.
      responses: 
        200: 
          body: 
            application/json: 
              schema: account-settings
              example: !include examples/account-settings-example.json
    post: 
      description: |
        Updates the authenticating user's settings.
        While all parameters for this method are optional, at least one or more
        should be provided when executing this request.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            trend_location_woeid: 
              description: |
                The Yahoo! Where On Earth ID to use as the user's default trend location.
                Global information is available by using 1 as the WOEID. The woeid mus
                be one of the locations returned by GET trends/available.
              type: integer
            sleep_time_enabled: 
              description: |
                When set to true, t or 1, will enable sleep time for the user. Sleep time
                is the time when push or SMS notifications should not be sent to the user.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
            start_sleep_time: 
              description: |
                The hour that sleep time should begin if it is enabled. The value for this
                parameter should be provided in ISO8601 format (i.e. 00-23). The time is
                considered to be in the same timezone as the user's time_zone setting.
              type: integer
            end_sleep_time: 
              description: |
                The hour that sleep time should end if it is enabled. The value for this
                parameter should be provided in ISO8601 format (i.e. 00-23). The time is
                considered to be in the same timezone as the user's time_zone setting.
              type: integer
            time_zone: 
              description: |
                The timezone dates and times should be displayed in for the user. The
                timezone must be one of the Rails TimeZone names.
            lang: 
              description: |
                The language which Twitter should render in for this user. The language
                must be specified by the appropriate two letter ISO 639-1 representation.
                Currently supported languages are provided by GET help/languages.
      responses: 
        200: 
          body: 
            application/json: 
              schema: account-settings
              example: !include examples/account-settings-post-example.json
  /verify_credentials{mediaTypeExtension}: 
    type: base
    get: 
      is: [ nestedable , canExcludeStatus ]
      description: |
        Returns an HTTP 200 OK response code and a representation of the requesting
        user if authentication was successful; returns a 401 status code and an error
        message if not. Use this method to test if supplied user credentials are valid.
      responses: 
        200: 
          body: 
            application/json: 
              schema: account-verify_credentials
              example: !include examples/account-verify_credentials-example.json
  /update_delivery_device{mediaTypeExtension}: 
    type: base
    post: 
      is: [ canExcludeEntities ]
      description: |
        Sets which device Twitter delivers updates to for the authenticating user.
        Sending none as the device parameter will disable SMS updates.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            device: 
              description: Must be one of sms, none.
              required: true
              enum: [ sms , none ]
      responses: 
        200: 
          description: Examples are not provided by twitter docs.
  /update_profile{mediaTypeExtension}: 
    type: base
    post: 
      is: [ canExcludeEntities , canSkipStatus ]
      description: |
        Sets values that users are able to set under the "Account" tab of their
        settings page. Only the parameters specified will be updated.
        While no specific parameter is required, at least one of these parameters
        should be provided when executing this method.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            name: 
              description: Full name associated with the profile. Maximum of 20 characters.
              maxLength: 20
            url: 
              description: |
                URL associated with the profile. Will be prepended with "http://" if no
                present. Maximum of 100 characters.
              maxLength: 100
            location: 
              description: |
                The city or country describing where the user of the account is located.
                The contents are not normalized or geocoded in any way. Maximum of 30
                characters.
              maxLength: 30
            description: 
              description: |
                A description of the user owning the account. Maximum of 160 characters.
              maxLength: 160
      responses: 
        200: 
          description: Profile updated.
  /update_profile_background_image{mediaTypeExtension}: 
    type: base
    post: 
      is: [ canExcludeEntities , canSkipStatus ]
      description: |
        Updates the authenticating user's profile background image. This method can
        also be used to enable or disable the profile background image.
        Although each parameter is marked as optional, at least one of image, tile
        or use must be provided when making this request.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            image: 
              description: |
                The background image for the profile, base64-encoded. Must be a valid
                GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with
                width larger than 2048 pixels will be forcibly scaled down. The image
                must be provided as raw multipart data, not a URL.
              type: file
            tile: 
              description: |
                Whether or not to tile the background image. If set to true, t or 1 the
                background image will be displayed tiled. The image will not be tiled
                otherwise.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
            use: 
              description: |
                Determines whether to display the profile background image or not.
                When set to true, t or 1 the background image will be displayed if
                an image is being uploaded with the request, or has been uploaded
                previously. An error will be returned if you try to use a background
                image when one is not being uploaded or does not exist. If this
                parameter is defined but set to anything other than true, t or 1,
                the background image will stop being used.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
      responses: 
        200: 
          body: 
            application/json: 
              schema: account-update_background
              example: !include examples/account-update_background-example.json
  /update_profile_colors{mediaTypeExtension}: 
    type: base
    post: 
      is: [ canExcludeEntities , canSkipStatus ]
      description: |
        Sets one or more hex values that control the color scheme of the authenticating
        user's profile page on twitter.com. Each parameter's value must be a valid
        hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            profile_background_color: 
              description: Profile background color.
            profile_link_color: 
              description: Profile link color.
            profile_sidebar_border_color: 
              description: "Profile sidebar's border color."
            profile_sidebar_fill_color: 
              description: "Profile sidebar's background color."
            profile_text_color: 
              description: Profile text color.
      responses: 
        200: 
          body: 
            application/json: 
              schema: account-update_profile_colors
              example: !include examples/account-update_profile_colors-example.json
  /update_profile_image{mediaTypeExtension}: 
    type: base
    post: 
      is: [ canExcludeEntities , canSkipStatus ]
      description: |
        Updates the authenticating user's profile image. Note that this method
        expects raw multipart data, not a URL to an image.
        This method asynchronously processes the uploaded file before updating the
        user's profile image URL. You can either update your local cache the nex
        time you request the user's information, or, at least 5 seconds after
        uploading the image, ask for the updated URL using GET users/show.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            image: 
              description: |
                The avatar image for the profile, base64-encoded. Must be a valid
                GIF, JPG, or PNG image of less than 700 kilobytes in size. Images
                with width larger than 500 pixels will be scaled down. Animated GIFs
                will be converted to a static GIF of the first frame, removing the
                animation.
              type: file
              required: true
      responses: 
        200: 
          body: 
            application/json: 
              schema: account-update_profile_image
              example: !include examples/account-update_profile_image-example.json
  /update_profile_banner{mediaTypeExtension}: 
    type: base
    post: 
      description: |
        Uploads a profile banner on behalf of the authenticating user. For bes
        results, upload an <5MB image that is exactly 1252px by 626px. Images will
        be resized for a number of display options. Users with an uploaded profile
        banner will have a profile_banner_url node in their Users objects. More
        information about sizing variations can be found in User Profile Images
        and Banners and GET users/profile_banner.
         Profile banner images are processed asynchronously. The profile_banner_url
        and its variant sizes will not necessary be available directly after upload.
         Note: If providing any one of the height, width, offset_left, or offset_top
         parameters, you must provide all of the sizing parameters.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            banner: 
              description: |
                The Base64-encoded or raw image data being uploaded as the user's
                new profile banner.
              type: file
              required: true
            width: 
              description: |
                The width of the preferred section of the image being uploaded in
                pixels. Use with height, offset_left, and offset_top to select the
                desired region of the image to use.
              type: integer
            height: 
              description: |
                The height of the preferred section of the image being uploaded in
                pixels. Use with width, offset_left, and offset_top to select the
                desired region of the image to use.
              type: integer
            offset_left: 
              description: |
                The number of pixels by which to offset the uploaded image from the
                left. Use with height, width, and offset_top to select the desired
                region of the image to use.
              type: integer
            offset_top: 
              description: |
                The number of pixels by which to offset the uploaded image from the
                top. Use with height, width, and offset_left to select the desired
                region of the image to use.
              type: integer
      responses: 
        200: 
          description: Profile banner image succesfully uploaded.
        201: 
          description: Profile banner image succesfully uploaded.
        202: 
          description: Profile banner image succesfully uploaded.
        400: 
          description: Either an image was not provided or the image data could not be processed.
        422: 
          description: The image could not be resized or is too large.
  /remove_profile_banner{mediaTypeExtension}: 
    type: base
    post: 
      description: |
        Removes the uploaded profile banner for the authenticating user. Returns
        HTTP 200 upon success.
      responses: 
        200: 
          description: Profile banner deleted.
/blocks: 
  /list{mediaTypeExtension}: 
    type: base
    get: 
      is: [ nestedable , canExcludeStatus , pageAble ]
      description: |
        Returns a collection of user objects that the authenticating user is blocking.
        Important On October 15, 2012 this method will become cursored by default,
        altering the default response format. See Using cursors to navigate collections
        for more details on how cursoring works.
      responses: 
        200: 
          body: 
            application/json: 
              schema: blocks-list
              example: !include examples/blocks-list-example.json
  /ids{mediaTypeExtension}: 
    type: base
    get: 
      is: [ pageAble , canStringifyIds ]
      description: |
        Returns an array of numeric user ids the authenticating user is blocking.
      responses: 
        200: 
          body: 
            application/json: 
              schema: blocks-ids
              example: !include examples/blocks-ids-example.json
  /create{mediaTypeExtension}: 
    type: base
    post: 
      is: [ canExcludeEntities , canSkipStatus , acceptUserThroughForm ]
      description: |
        Blocks the specified user from following the authenticating user. In addition
        the blocked user will not show in the authenticating users mentions or timeline
        (unless retweeted by another user). If a follow or friend relationship exists
        it is destroyed.
        Either screen_name or user_id must be provided.
      responses: 
        200: 
          body: 
            application/json: 
              schema: blocks-create
              example: !include examples/blocks-create-example.json
  /destroy{mediaTypeExtension}: 
    type: base
    post: 
      is: [ canExcludeEntities , canSkipStatus , acceptUserThroughForm ]
      description: |
        Un-blocks the user specified in the ID parameter for the authenticating user.
        Returns the un-blocked user in the requested format when successful. If
        relationships existed before the block was instated, they will not be restored.
        One of screen_name or id must be provided.
      responses: 
        200: 
          body: 
            application/json: 
              schema: blocks-create
              example: !include examples/blocks-create-example.json
/users: 
  /lookup{mediaTypeExtension}: 
    type: usersType
    get: 
      is: [ nestedable , acceptsUsers ]
      description: |
        Returns fully-hydrated user objects for up to 100 users per request, as
        specified by comma-separated values passed to the user_id and/or
        screen_name parameters.
        This method is especially useful when used in conjunction with collections
        of user IDs returned from GET friends/ids and GET followers/ids.
        GET users/show is used to retrieve a single user object.
      responses:
        200:
          body:
            application/json: 
              example: !include examples/users-lookup-example.json
  /show{mediaTypeExtension}: 
    type: usersType
    get: 
      is: [ nestedable ]
      description: |
        Returns a variety of information about the user specified by the required
        user_id or screen_name parameter. The author's most recent Tweet will be
        returned inline when possible.
        GET users/lookup is used to retrieve a bulk collection of user objects.
        You must be following a protected user to be able to see their most recen
        Tweet. If you don't follow a protected user, the users Tweet will be removed.
        A Tweet will not always be returned in the current_status field.
      queryParameters: 
        user_id: 
          description: |
            The ID of the user for whom to return results for. Either an id or
            screen_name is required for this method.
          type: integer
          required: true
        screen_name: 
          description: |
            The screen name of the user for whom to return results for. Either
            a id or screen_name is required for this method.
      responses:
        200:
          body:
            application/json: 
              example: !include examples/users-example.json 
  /search{mediaTypeExtension}: 
    type: usersType
    get: 
      is: [ nestedable , limitableByCount: { max: 20 } ]
      description: |
        Provides a simple, relevance-based search interface to public user accounts
        on Twitter. Try querying by topical interest, full name, company name,
        location, or other criteria. Exact match searches are not supported.
        Only the first 1,000 matching results are available.
      queryParameters: 
        q: 
          description: |
            The search query to run against people search.
          required: true
        page: 
          description: |
            Specifies the page of results to retrieve.
      responses:
        200:
          body:
            application/json: 
              example: !include examples/users-example.json 
  /contributees{mediaTypeExtension}: 
    type: usersType
    get: 
      is: [ nestedable , acceptsUser , canExcludeStatus ]
      description: |
        Returns a collection of users that the specified user can "contribute" to.
      responses:
        200:
          body:
            application/json: 
              example: !include examples/users-example.json
  /contributors{mediaTypeExtension}: 
    type: usersType
    get: 
      is: [ nestedable , acceptsUser , canExcludeStatus ]
      description: |
        Returns a collection of users who can contribute to the specified account.
      responses:
        200:
          body:
            application/json: 
              example: !include examples/users-example.json
  /profile_banner{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUser ]
      description: |
        Returns a map of the available size variations of the specified user's profile
        banner. If the user has not uploaded a profile banner, a HTTP 404 will be
        served instead. This method can be used instead of string manipulation on the
        profile_banner_url returned in user objects as described in User Profile Images
        and Banners.
        The profile banner data available at each size variant's URL is in PNG format.
      responses: 
        200: 
          body: 
            application/json: 
              schema: users-profile-banner
              example: !include examples/users-profile-banner-example.json
  /suggestions{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Access to Twitter's suggested user list. This returns the list of suggested
        user categories. The category can be used in GET users/suggestions/{slug}.json
        to get the users in that category.
      queryParameters: 
        lang: 
          description: |
            Restricts the suggested categories to the requested language. The language
            must be specified by the appropriate two letter ISO 639-1 representation.
            Currently supported languages are provided by the GET help/languages API
            request. Unsupported language codes will receive English (en) results. If
            you use lang in this request, ensure you also include it when requesting
            the GET users/suggestions/{slug}.json list.
      responses: 
        200: 
          body: 
            application/json: 
              schema: user-suggestions
              example: !include examples/user-suggestions-example.json
  /suggestions: 
    /{slug}{mediaTypeExtension}: 
      type: base
      uriParameters: 
        slug: 
          description: The short name of list or a category
      get: 
        description: |
          Access the users in a given category of the Twitter suggested user list.
          It is recommended that applications cache this data for no more than one hour.
        queryParameters: 
          lang: 
            description: |
              Restricts the suggested categories to the requested language. The
              language must be specified by the appropriate two letter ISO 639-1
              representation. Currently supported languages are provided by the GET
              help/languages API request. Unsupported language codes will receive
              English (en) results. If you use lang in this request, ensure you also
              include it when requesting the GET users/suggestions/:slug list.
        responses: 
          200: 
            body: 
              application/json: 
                schema: users-suggestion
                example: !include examples/users-suggestion-example.json
    /{slug}: 
      /members{mediaTypeExtension}: 
        type: usersType
        get: 
          description: |
            Access the users in a given category of the Twitter suggested user lis
            and return their most recent status if they are not a protected user.
          responses:
            200:
              body:
                application/json: 
                  example: !include examples/users-example.json
  /report_spam{mediaTypeExtension}: 
    type: usersType
    post: 
      is: [ acceptUserThroughForm ]
      description: |
        Report the specified user as a spam account to Twitter. Additionally performs
        the equivalent of POST blocks/create on behalf of the authenticated user.
        One of parameters must be provided.
      responses:
        200:
          body:
            application/json: 
              example: !include examples/users-lookup-example.json
/favorites: 
  /list{mediaTypeExtension}: 
    type: tweetsType
    get: 
      is: [ acceptsUser , limitableById , limitableByCount: { max: 200 } ]
      description: |
        Returns the 20 most recent Tweets favorited by the authenticating or specified
        user.
        If you do not provide either a user_id or screen_name to this method, i
        will assume you are requesting on behalf of the authenticating user. Specify
        one or the other for best results.
      queryParameters: 
        include_entities: 
          description: The entities node will be omitted when set to false.
          enum: 
            - 0
            - 1
            - true
            - false
            - ""
            - f
      responses:
        200:
          body:
            application/json: 
              example: !include examples/favourites-list-example.json
  /destroy{mediaTypeExtension}: 
    type: tweetsType
    post: 
      is: [ canExcludeEntities ]
      description: |
        Un-favorites the status specified in the ID parameter as the authenticating
        user. Returns the un-favorited status in the requested format when successful.
        This process invoked by this method is asynchronous. The immediately returned
        status may not indicate the resultant favorited status of the tweet. A 200 OK
        response from this method will indicate whether the intended action was
        successful or not.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            id: 
              description: |
                The numerical ID of the desired status.
              type: integer
              required: true
      responses:
        200:
          body:
            application/json: 
              example: !include examples/favourites-list-example.json
  /create{mediaTypeExtension}: 
    type: tweetsType
    post: 
      is: [ canExcludeEntities ]
      description: |
        Favorites the status specified in the ID parameter as the authenticating user.
        Returns the favorite status when successful.
        This process invoked by this method is asynchronous. The immediately returned
        status may not indicate the resultant favorited status of the tweet. A 200 OK
        response from this method will indicate whether the intended action was
        successful or not.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            id: 
              description: |
                The numerical ID of the desired status.
              type: integer
              required: true
      responses:
        200:
          body:
            application/json: 
              example: !include examples/favourites-list-example.json
/lists: 
  /list{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUser ]
      description: |
        Returns all lists the authenticating or specified user subscribes to, including
        their own. The user is specified using the user_id or screen_name parameters.
        If no user is given, the authenticating user is used.
        This method used to be GET lists in version 1.0 of the API and has been renamed
        for consistency with other call.
        A maximum of 100 results will be returned by this call. Subscribed lists are
        returned first, followed by owned lists. This means that if a user subscribes
        to 90 lists and owns 20 lists, this method returns 90 subscriptions and 10 owned
        lists. The reverse method returns owned lists first, so with reverse=true, 20
        owned lists and 80 subscriptions would be returned. If your goal is to obtain
        every list a user owns or subscribes to, use GET lists/ownerships and/or
        GET lists/subscriptions instead.
      queryParameters: 
        reverse: 
          description: |
            Set this to true if you would like owned lists to be returned first. See
            description above for information on how this parameter works.
          type: boolean
      responses: 
        200: 
          body: 
            application/json: 
              schema: lists
              example: !include examples/lists-example.json
  /statuses{mediaTypeExtension}: 
    type: tweetsType
    get: 
      is: [ nestedable , owned , acceptsListId , limitableById ]
      description: |
        Returns a timeline of tweets authored by members of the specified list.
        Retweets are included by default. Use the include_rts=false parameter to
        omit retweets.
        Embedded Timelines is a great way to embed list timelines on your website.
      queryParameters: 
        count: 
          description: |
            Specifies the number of results to retrieve per "page."
          type: integer
        include_rts: 
          description: |
            When set to either true, t or 1, the list timeline will contain native
            retweets (if they exist) in addition to the standard stream of tweets.
            The output format of retweeted tweets is identical to the representation
            you see in home_timeline.
          enum: 
            - 0
            - 1
            - true
            - false
            - ""
            - f
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/list-statuses-example.json
  /memberships{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUser , pageAble ]
      description: |
        Returns the lists the specified user has been added to. If user_id or
        screen_name are not provided the memberships for the authenticating user
        are returned.
      queryParameters: 
        filter_to_owned_lists: 
          description: |
            When set to true, t or 1, will return just lists the authenticating
            user owns, and the user represented by user_id or screen_name is a
            member of.
          enum: 
            - 0
            - 1
            - true
            - false
            - ""
            - f
      responses: 
        200: 
          body: 
            application/json: 
              schema: lists
              example: !include examples/lists-membership-example.json
  /subscribers{mediaTypeExtension}: 
    type: usersType
    get: 
      is: [ nestedable , owned , canExcludeStatus , acceptsListId , pageAble ]
      description: |
        Returns the subscribers of the specified list. Private list subscribers will
        only be shown if the authenticated user owns the specified list.
        Either a list_id or a slug is required. If providing a list_slug, an
        owner_screen_name or owner_id is also required.
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/list-subscribers-example.json
  /subscribers: 
    /create{mediaTypeExtension}: 
      type: usersType
      post: 
        is: [ acceptsListOwner , needsList ]
        description: |
          Subscribes the authenticated user to the specified list.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        body: 
          application/x-www-form-urlencoded: 
        responses: 
          200: 
            body: 
              application/json: 
                example: !include examples/list-subscribers-example.json
    /show{mediaTypeExtension}: 
      type: usersType
      get: 
        is: [ nestedable , owned , acceptsListId , requiresScreenName ]
        description: |
          Check if the specified user is a subscriber of the specified list. Returns
          the user if they are subscriber.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        responses: 
          200: 
            body: 
              application/json: 
                example: !include examples/list-subscribers-example.json
    /destroy{mediaTypeExtension}: 
      type: base
      post: 
        is: [ acceptsListOwner , needsList ]
        description: |
          Unsubscribes the authenticated user from the specified list.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        responses: 
          200: 
            description: Unsubscribed successfully.
  /members{mediaTypeExtension}: 
    type: usersType
    get: 
      is: [ nestedable , owned , acceptsListId , pageAble ]
      description: |
        Returns the members of the specified list. Private list members will only be
        shown if the authenticated user owns the specified list.
        Either a list_id or a slug is required. If providing a list_slug, an
        owner_screen_name or owner_id is also required.
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/list-members-example.json
  /members: 
    /destroy{mediaTypeExtension}: 
      type: base
      post: 
        is: [ acceptsListOwner , acceptUserThroughForm , needsList ]
        description: |
          Removes the specified member from the list. The authenticated user must be
          the list's owner to remove members from the list.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        body: 
          application/x-www-form-urlencoded: 
        responses: 
          200: 
            description: Member removed from list.
    /destroy_all{mediaTypeExtension}: 
      type: base
      post: 
        is: [ acceptsListOwner , needsList ]
        description: |
          Removes multiple members from a list, by specifying a comma-separated lis
          of member ids or screen names. The authenticated user must own the list to
          be able to remove members from it. Note that lists can't have more than 500
          members, and you are limited to removing up to 100 members to a list at a
          time with this method.
          Please note that there can be issues with lists that rapidly remove and add
          memberships. Take care when using these methods such that you are not too
          rapidly switching between removals and adds on the same list.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              user_id: 
                description: |
                  A comma separated list of user IDs, up to 100 are allowed in a single
                  request.
              screen_name: 
                description: |
                  A comma separated list of screen names, up to 100 are allowed in a
                  single request.
        responses: 
          200: 
            description: Members was removed from the list.
    /create_all{mediaTypeExtension}: 
      type: base
      post: 
        is: [ needsList ]
        description: |
          Adds multiple members to a list, by specifying a comma-separated list of
          member ids or screen names. The authenticated user must own the list to be
          able to add members to it. Note that lists can't have more than 5,000 members,
          and you are limited to adding up to 100 members to a list at a time with this
          method.
          Please note that there can be issues with lists that rapidly remove and add
          memberships. Take care when using these methods such that you are not too
          rapidly switching between removals and adds on the same list.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              user_id: 
                description: |
                  A comma separated list of user IDs, up to 100 are allowed in a
                  single request.
              screen_name: 
                description: |
                  A comma separated list of screen names, up to 100 are allowed in
                  a single request.
              owner_screen_name: 
                description: |
                  The screen name of the user who owns the list being requested by a slug.
              owner_id: 
                description: |
                  The user ID of the user who owns the list being requested by a slug.
        responses: 
          200: 
            description: Members added.
    /show{mediaTypeExtension}: 
      type: usersType
      get: 
        is: [ nestedable , owned , canExcludeStatus , acceptsListId , requiresScreenName ]
        description: |
          Check if the specified user is a member of the specified list.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        responses: 
          200: 
            body: 
              application/json: 
                example: !include examples/list-show-members-example.json
    /create{mediaTypeExtension}: 
      type: base
      post: 
        is: [ acceptsListOwner , needsList ]
        description: |
          Add a member to a list. The authenticated user must own the list to be able
          to add members to it. Note that lists can't have more than 500 members.
          Either a list_id or a slug is required. If providing a list_slug, an
          owner_screen_name or owner_id is also required.
        body: 
          application/x-www-form-urlencoded: 
            formParameters: 
              user_id: 
                description: |
                  The ID of the user for whom to return results for. Helpful for
                  disambiguating when a valid user ID is also a valid screen name.
                type: integer
                required: true
              screen_name: 
                description: |
                  The screen name of the user for whom to return results for. Helpful
                  for disambiguating when a valid screen name is also a user ID.
                required: true
        responses: 
          200: 
            description: Member added.
  /destroy{mediaTypeExtension}: 
    type: base
    post: 
      is: [ acceptsListOwner , needsList ]
      description: |
        Deletes the specified list. The authenticated user must own the list to be
        able to destroy it.
        Either a list_id or a slug is required. If providing a list_slug, an
        owner_screen_name or owner_id is also required.
      responses: 
        200: 
          body: 
            application/json: 
              schema: list
              example: !include examples/lists-destroy-example.json
  /update{mediaTypeExtension}: 
    type: base
    post: 
      is: [ acceptsListOwner , needsList ]
      description: |
        Updates the specified list. The authenticated user must own the list to be
        able to update it.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            name: 
              description: The name for the list.
            mode: 
              description: |
                Whether your list is public or private. Values can be public or private.
                If no mode is specified the list will be public.
              enum: [ public , private ]
              default: public
            description: 
              description: The description to give the list.
      responses: 
        200: 
          description: List updated.
  /create{mediaTypeExtension}: 
    type: base
    post: 
      description: |
        Creates a new list for the authenticated user. Note that you can't create
        more than 20 lists per account.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            name: 
              description: |
                The name for the list.
                A list's name must start with a letter and can consist only of 25 or
                fewer letters, numbers, "-", or "_" characters.
              required: true
            mode: 
              description: |
                Whether your list is public or private. Values can be public or
                private. If no mode is specified the list will be public.
              enum: [ public , private ]
              default: public
            description: 
              description: The description to give the list.
      responses: 
        200: 
          body: 
            application/json: 
              schema: list
              example: !include examples/lists-create-example.json
  /show{mediaTypeExtension}: 
    type: base
    get: 
      is: [ owned , acceptsListId ]
      description: |
        Returns the specified list. Private lists will only be shown if the
        authenticated user owns the specified list.
        Either a list_id or a slug is required. If providing a list_slug, an
        owner_screen_name or owner_id is also required.
      responses: 
        200: 
          body: 
            application/json: 
              schema: list
              example: !include examples/lists-create-example.json
  /subscriptions{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUser , pageAble , limitableByCount: { max: 1000 } ]
      description: |
        Obtain a collection of the lists the specified user is subscribed to, 20
        lists per page by default. Does not include the user's own lists.
        A user_id or screen_name must be provided.
      responses: 
        200: 
          body: 
            application/json: 
              schema: lists
              example: !include examples/lists-subscribition-example.json
  /ownerships{mediaTypeExtension}: 
    type: base
    get: 
      is: [ acceptsUser , limitableByCount: { max: 1000 } ]
      description: |
        Returns the lists owned by the specified Twitter user. Private lists will
        only be shown if the authenticated user is also the owner of the lists.
        A user_id or screen_name must be provided.
      queryParameters: 
        cursor: 
          description: |
            Breaks the results into pages. Provide a value of -1 to begin paging.
            Provide values as returned in the response body's next_cursor and
            previous_cursor attributes to page back and forth in the list. It is
            recommended to always use cursors when the method supports them. See
            Using cursors to navigate collections for more information.
      responses: 
        200: 
          body: 
            application/json: 
              schema: lists
              example: !include examples/lists-example.json
/saved_searches: 
  /list{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns the authenticated user's saved search queries.
      responses: 
        200: 
          body: 
            application/json: 
              schema: saved_searches
              example: !include examples/saved_searches-example.json
  /show/{id}{mediaTypeExtension}: 
    type: base
    uriParameters: 
      id: 
        description: The ID of the saved search.
        type: integer
    get: 
      description: |
        Retrieve the information for the saved search represented by the given id.
        The authenticating user must be the owner of saved search ID being requested.
      responses: 
        200: 
          body: 
            application/json: 
              schema: saved_search
              example: !include examples/saved_search-example.json
  /create{mediaTypeExtension}: 
    type: base
    post: 
      description: |
        Create a new saved search for the authenticated user. A user may only have
        25 saved searches.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            query: 
              description: |
                The query of the search the user would like to save.
              required: true
      responses: 
        200: 
          body: 
            application/json: 
              schema: saved_search
              example: !include examples/saved_search-example.json
  /destroy/{id}{mediaTypeExtension}: 
    type: base
    uriParameters: 
      id: 
        description: The ID of the saved search.
        type: integer
    post: 
      description: |
        Destroys a saved search for the authenticating user. The authenticating
        user must be the owner of saved search id being destroyed.
      responses: 
        200: 
          body: 
            application/json: 
              schema: saved_search
              example: !include examples/saved_search-example.json
/geo: 
  /id/{place_id}{mediaTypeExtension}: 
    type: geoIdType
    uriParameters: 
      place_id: 
        description: |
          A place in the world. These IDs can be retrieved from geo/reverse_geocode.
    get: 
      description: Returns all the information about a known place.
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/geo-id-example.json
  /reverse_geocode{mediaTypeExtension}: 
    type: geoIdType
    get: 
      is: [ canProvideJsonP , geoLimitable , acceptPlaceAccuracy ]
      description: |
        Given a latitude and a longitude, searches for up to 20 places that can be
        used as a place_id when updating a status.
        This request is an informative call and will deliver generalized results
        about geography.
  /search{mediaTypeExtension}: 
    type: geoIdType
    get: 
      is: [ canProvideJsonP , limitableByPlace , acceptPlaceAccuracy ]
      description: |
        Search for places that can be attached to a statuses/update. Given a latitude
        and a longitude pair, an IP address, or a name, this request will return a
        list of all the valid places that can be used as the place_id when updating
        a status.
        Conceptually, a query can be made from the user's location, retrieve a lis
        of places, have the user validate the location he or she is at, and then
        send the ID of this location with a call to POST statuses/update.
        This is the recommended method to use find places that can be attached to
        statuses/update. Unlike GET geo/reverse_geocode which provides raw data
        access, this endpoint can potentially re-order places with regards to the
        user who is authenticated. This approach is also preferred for interactive
        place matching with the user.
      queryParameters: 
        lat: 
          description: |
            The latitude to search around. This parameter will be ignored unless i
            is inside the range -90.0 to +90.0 (North is positive) inclusive. I
            will also be ignored if there isn't a corresponding long parameter.
          type: number
          minimum: -90
          maximum: 90
        long: 
          description: |
            The longitude to search around. The valid ranges for longitude is -180.0
            to +180.0 (East is positive) inclusive. This parameter will be ignored
            if outside that range, if it is not a number, if geo_enabled is disabled,
            or if there not a corresponding lat parameter.
          type: number
          minimum: -180
          maximum: 180
        query: 
          description: |
            Free-form text to match against while executing a geo-based query, bes
            suited for finding nearby locations by name. Remember to URL encode the query.
        ip: 
          description: |
            An IP address. Used when attempting to fix geolocation based off of the
            user's IP address.
  /similar_places{mediaTypeExtension}: 
    type: geoIdType
    get: 
      is: [ canProvideJsonP , geoLimitable , limitableByPlace ]
      description: |
        Locates places near the given coordinates which are similar in name.
        Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to POST geo/place to create a new one.
        The token contained in the response is the token needed to be able to create a new place.
      queryParameters: 
        name: 
          description: The name a place is known as.
          required: true
  /place{mediaTypeExtension}: 
    type: geoIdType
    post: 
      description: |
        Creates a new place object at the given latitude and longitude.
        Before creating a place you need to query GET geo/similar_places with the
        latitude, longitude and name of the place you wish to create. The query
        will return an array of places which are similar to the one you wish to
        create, and a token. If the place you wish to create isn't in the returned
        array you can use the token with this method to create a new one.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            name: 
              description: The name a place is known as.
              required: true
            contained_within: 
              description: |
                This is the place_id which you would like to restrict the search results
                to. Setting this value means only places within the given place_id will
                be found.
                Specify a place_id. For example, to scope all results to places within
                "San Francisco, CA USA", you would specify a place_id of "5a110d312052166f"
            token: 
              description: The token found in the response from geo/similar_places.
              required: true
            lat: 
              description: |
                The latitude to search around. This parameter will be ignored unless i
                is inside the range -90.0 to +90.0 (North is positive) inclusive. I
                will also be ignored if there isn't a corresponding long parameter.
              type: number
              required: true
              minimum: -90
              maximum: 90
            long: 
              description: |
                The longitude to search around. The valid ranges for longitude is -180.0
                to +180.0 (East is positive) inclusive. This parameter will be ignored
                if outside that range, if it is not a number, if geo_enabled is disabled,
                or if there not a corresponding lat parameter.
              type: number
              required: true
              minimum: -180
              maximum: 180
            "attribute:street_address": 
              description: |
                This parameter searches for places which have this given street address.
                There are other well-known, and application specific attributes available.
                Custom attributes are also permitted. Learn more about Place Attributes.
            callback: 
              description: |
                If supplied, the response will use the JSONP format with a callback of
                the given name.
/trends: 
  /place{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns the top 10 trending topics for a specific WOEID, if trending information
        is available for it.
        The response is an array of "trend" objects that encode the name of the
        trending topic, the query parameter that can be used to search for the topic
        on Twitter Search, and the Twitter Search URL.
        This information is cached for 5 minutes. Requesting more frequently than
        that will not return any more data, and will count against your rate limit usage.
      queryParameters: 
        id: 
          description: |
            The Yahoo! Where On Earth ID of the location to return trending information
            for. Global information is available by using 1 as the WOEID.
          type: integer
          required: true
        exclude: 
          description: |
            Setting this equal to hashtags will remove all hashtags from the trends list.
      responses: 
        200: 
          body: 
            application/json: 
              schema: trends
              example: !include examples/trends-example.json
  /available{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns the locations that Twitter has trending topic information for.
        The response is an array of "locations" that encode the location's WOEID
        and some other human-readable information such as a canonical name and
        country the location belongs in.
        A WOEID is a Yahoo! Where On Earth ID.
      responses: 
        200: 
          body: 
            application/json: 
              schema: trends-available
              example: !include examples/trends-available-example.json
  /closest{mediaTypeExtension}: 
    type: base
    get: 
      is: [ geoLimitable ]
      description: |
        Returns the locations that Twitter has trending topic information for,
        closest to a specified location.
        The response is an array of "locations" that encode the location's WOEID
        and some other human-readable information such as a canonical name and
        country the location belongs in.
        A WOEID is a Yahoo! Where On Earth ID.
      responses: 
        200: 
          body: 
            application/json: 
              schema: trends-available
              example: !include examples/trends-available-example.json
/help: 
  /configuration{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns the current configuration used by Twitter including twitter.com
        slugs which are not usernames, maximum photo resolutions, and t.co URL
        lengths.
        It is recommended applications request this endpoint when they are loaded,
        but no more than once a day.
      responses: 
        200: 
          body: 
            application/json: 
              schema: help-config
              example: !include examples/help-config-example.json
  /languages{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns the list of languages supported by Twitter along with their ISO 639-1
        code. The ISO 639-1 code is the two letter value to use if you include lang
        with any of your requests.
      responses: 
        200: 
          body: 
            application/json: 
              schema: help-languages
              example: !include examples/help-languages-example.json
  /privacy{mediaTypeExtension}: 
    type: base
    get: 
      description: "Returns Twitter's Privacy Policy."
      responses: 
        200: 
          body: 
            application/json: 
              schema: privacy
              example: !include examples/privacy-example.json
  /tos{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns the Twitter Terms of Service in the requested format. These are no
        the same as the Developer Rules of the Road.
      responses: 
        200: 
          body: 
            application/json: 
              schema: tos
              example: !include examples/tos-example.json
/application/rate_limit_status{mediaTypeExtension}: 
  type: base
  get: 
    description: |
      Returns the current rate limits for methods belonging to the specified
      resource families.
      Each 1.1 API resource belongs to a "resource family" which is indicated in
      its method documentation. You can typically determine a method's resource
      family from the first component of the path after the resource version.
      This method responds with a map of methods belonging to the families specified
      by the resources parameter, the current remaining uses for each of those
      resources within the current rate limiting window, and its expiration time
      in epoch time. It also includes a rate_limit_context field that indicates
      the current access token or application-only authentication context.
      You may also issue requests to this method without any parameters to receive
      a map of all rate limited GET methods. If your application only uses a few
      of methods, please explicitly provide a resources parameter with the specified
      resource families you work with.
      When using app-only auth, this method's response indicates the app-only auth
      rate limiting context.
      Read more about REST API Rate Limiting in v1.1 and review the limits.
    queryParameters: 
      resources: 
        description: |
          A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.
          See Rate Limiting in API v1.1 for more information.
        example: statuses,friends,trends,help
    responses: 
      200: 
        body: 
          application/json: 
            schema: rate_limits
            example: !include examples/rate_limits-example.json
/statuses: 
  /retweets/{id}{mediaTypeExtension}: 
    type: tweetsType
    uriParameters: 
      id: 
        description: The numerical ID of the desired status.
        type: integer
    get: 
      is: [ trimmable , limitableByCount: { max: 100 } ]
      description: |
        Returns a collection of the 100 most recent retweets of the tweet specified
        by the id parameter.
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-retweets-id-example.json
  /destroy/{id}{mediaTypeExtension}: 
    type: tweetsType
    uriParameters: 
      id: 
        description: The numerical ID of the desired status.
        type: integer
    post: 
      is: [ canTrimUser ]
      description: |
        Destroys the status specified by the required ID parameter. The authenticating
        user must be the author of the specified status. Returns the destroyed status
        if successful.
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-destroy-id-example.json 
  /update_with_media{mediaTypeExtension}: 
    type: tweetsType
    post: 
      description: |
        Updates the authenticating user's current status and attaches media for
        upload. In other words, it creates a Tweet with a picture attached.
        Unlike POST statuses/update, this method expects raw multipart data. Your
        POST request's Content-Type should be set to multipart/form-data with the
        media[] parameter
        The Tweet text will be rewritten to include the media URL(s), which will
        reduce the number of characters allowed in the Tweet text. If the URL(s)
        cannot be appended without text truncation, the tweet will be rejected and
        this method will return an HTTP 403 error.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            status: 
              description: |
                The text of your status update. URL encode as necessary. t.co link
                wrapping may affect character counts if the post contains URLs. You mus
                additionally account for the characters_reserved_per_media per uploaded
                media, additionally accounting for space characters in between finalized
                URLs.
                Note: Request the GET help/configuration endpoint to get the curren
                characters_reserved_per_media and max_media_per_upload values.
              required: true
              maxLength: 140
            media[]: 
              description: |
                Up to max_media_per_upload files may be specified in the request, each
                named media[]. Supported image formats are PNG, JPG and GIF. Animated
                GIFs are not supported. This data must be the raw image bytes - base64
                encoded images are currently not supported.
                Note: Request the GET help/configuration endpoint to get the curren
                max_media_per_upload and photo_size_limit values.
              required: true
            possibly_sensitive: 
              description: |
                Set to true for content which may not be suitable for every audience.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
            in_reply_to_status_id: 
              description: |
                The ID of an existing status that the update is in reply to.
                Note: This parameter will be ignored unless the author of the tweet this
                parameter references is mentioned within the status text. Therefore, you
                must include @username, where username is the author of the referenced
                tweet, within the update.
              type: integer
            lat: 
              description: |
                The latitude of the location this tweet refers to. This parameter will
                be ignored unless it is inside the range -90.0 to +90.0 (North is positive)
                inclusive. It will also be ignored if there isn't a corresponding long
                parameter.
              type: number
              minimum: -90
              maximum: 90
            long: 
              description: |
                The longitude of the location this tweet refers to. The valid ranges for
                longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter
                will be ignored if outside that range, if it is not a number, if geo_enabled
                is disabled, or if there not a corresponding lat parameter.
              type: number
              minimum: -180
              maximum: 180
            place_id: 
              description: |
                A place in the world. These IDs can be retrieved from GET geo/reverse_geocode.
            display_coordinates: 
              description: |
                Whether or not to put a pin on the exact coordinates a twee
                has been sent from.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-update_with_media-example.json 
  /mentions_timeline{mediaTypeExtension}: 
    type: tweetsType
    get: 
      is: [ nestedable , trimmable , limitableById , contibutorCanBeDetailed ]
      description: |
        Returns the 20 most recent mentions (tweets containing a users's @screen_name)
        for the authenticating user.
        The timeline returned is the equivalent of the one seen when you view your
        mentions on twitter.com.
        This method can only return up to 800 tweets.
      queryParameters: 
        count: 
          description: |
            Specifies the number of tweets to try and retrieve, up to a maximum of
            200. The value of count is best thought of as a limit to the number of
            tweets to return because suspended or deleted content is removed after
            the count has been applied. We include retweets in the count, even if
            include_rts is not supplied. It is recommended you always send include_rts=1
            when using this API method.
          type: integer
          maximum: 200
          example: 12
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-mentions_timeline-example.json 
  /oembed{mediaTypeExtension}: 
    type: base
    get: 
      description: |
        Returns information allowing the creation of an embedded representation
        of a Tweet on third party sites. See the oEmbed specification for information
        about the response format.
        While this endpoint allows a bit of customization for the final appearance
        of the embedded Tweet, be aware that the appearance of the rendered Tweet may
        change over time to be consistent with Twitter's Display Requirements. Do no
        rely on any class or id parameters to stay constant in the returned markup.
      queryParameters: 
        id: 
          description: The Tweet/status ID to return embed code for.
          type: integer
          required: true
        url: 
          description: The URL of the Tweet/status to be embedded.
          required: true
        maxwidth: 
          description: |
            The maximum width in pixels that the embed should be rendered at.
          type: integer
          minimum: 250
          maximum: 550
          example: 100
        hide_media: 
          description: |
            Specifies whether the embedded Tweet should automatically expand
            images which were uploaded via POST statuses/update_with_media.
            When set to either true, t or 1 images will not be expanded.
          enum: 
            - 0
            - 1
            - true
            - false
            - ""
            - f
          default: false
        hide_thread: 
          description: |
            Specifies whether the embedded Tweet should automatically show the
            original message in the case that the embedded Tweet is a reply. When
            set to either true, t or 1 the original Tweet will not be shown.
          enum: 
            - 0
            - 1
            - true
            - false
            - ""
            - f
          default: false
        omit_script: 
          description: |
            Specifies whether the embedded Tweet HTML should include a <script>
            element pointing to widgets.js. In cases where a page already includes
            widgets.js, setting this value to true will prevent a redundant scrip
            element from being included. When set to either true, t or 1 the <script>
            element will not be included in the embed HTML, meaning that pages mus
            include a reference to widgets.js manually.
          enum: 
            - 0
            - 1
            - true
            - false
            - ""
            - f
        align: 
          description: |
            Specifies whether the embedded Tweet should be left aligned, right aligned,
            or centered in the page. Valid values are left, right, center, and none.
            Defaults to none, meaning no alignment styles are specified for the Tweet.
          enum: 
            - lef
            - righ
            - center
            - none
          default: none
        related: 
          description: |
            A value for the TWT related parameter, as described in Web Intents. This
            value will be forwarded to all Web Intents calls.
        lang: 
          description: |
            Language code for the rendered embed. This will affect the text and
            localization of the rendered HTML.
      responses: 
        200: 
          description: Example is not provided by twitter docs.
  /retweeters/ids{mediaTypeExtension}: 
    type: idsType
    get: 
      is: [ pageAble , idsCanBeStringified ]
      description: |
        Returns a collection of up to 100 user IDs belonging to users who have
        retweeted the tweet specified by the id parameter.
      queryParameters: 
        id: 
          description: The numerical ID of the desired status.
          type: integer
          required: true
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-retweeters-ids-example.json
  /update{mediaTypeExtension}: 
    type: tweetsType
    post: 
      is: [ canTrimUser ]
      description: |
        Updates the authenticating user's current status, also known as tweeting.
        To upload an image to accompany the tweet, use `POST statuses/update_with_media`.
        For each update attempt, the update text is compared with the authenticating
        user's recent tweets. Any attempt that would result in duplication will be
        blocked, resulting in a 403 error. Therefore, a user cannot submit the same
        status twice in a row.
        While not rate limited by the API a user is limited in the number of tweets
        they can create at a time. If the number of updates posted by the user reaches
        the current allowed limit this method will return an HTTP 403 error.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            status: 
              description: |
                The text of your status update, typically up to 140 characters. URL encode
                as necessary. t.co link wrapping may effect character counts.
                There are some special commands in this field to be aware of. For instance,
                preceding a message with "D " or "M " and following it with a screen name
                can create a direct message to that user if the relationship allows for it.
              required: true
              maxLength: 140
            in_reply_to_status_id: 
              description: |
                The ID of an existing status that the update is in reply to.
                Note: This parameter will be ignored unless the author of the tweet this
                parameter references is mentioned within the status text. Therefore, you
                must include @username, where username is the author of the referenced
                tweet, within the update.
              type: integer
            lat: 
              description: |
                The latitude of the location this tweet refers to. This parameter will
                be ignored unless it is inside the range -90.0 to +90.0 (North is positive)
                inclusive. It will also be ignored if there isn't a corresponding long
                parameter.
              type: number
              minimum: -90
              maximum: 90
            long: 
              description: |
                The longitude of the location this tweet refers to. The valid ranges for
                longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter
                will be ignored if outside that range, if it is not a number, if geo_enabled
                is disabled, or if there not a corresponding lat parameter.
              type: number
              minimum: -180
              maximum: 180
            place_id: 
              description: |
                A place in the world. These IDs can be retrieved from GET geo/reverse_geocode.
            display_coordinates: 
              description: |
                Whether or not to put a pin on the exact coordinates a twee
                has been sent from.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-update-example.json           
  /sample{mediaTypeExtension}: 
    type: base
    get: 
      is: [ canBeDelimeted ]
      description: |
        Returns a small random sample of all public statuses. The Tweets returned
        by the default access level are the same, so if two different clients connec
        to this endpoint, they will see the same Tweets.
      responses: 
        200: 
          description: Example is not provided by twitter docs.
  /show/{id}{mediaTypeExtension}: 
    type: tweetsType
    uriParameters: 
      id: 
        description: The numerical ID of the desired Tweet.
        type: integer
    get: 
      is: [ nestedable , trimmable ]
      description: |
        Returns a single Tweet, specified by the id parameter. The Tweet's author
        will also be embedded within the tweet.
        
        Extended description
        About Geo
        If there is no geotag for a status, then there will be an empty <geo/> or
        "geo" : {}. This can only be populated if the user has used the Geotagging
        API to send a statuses/update.
        The JSON response mostly uses conventions laid out in GeoJSON. Unfortunately,
        the coordinates that Twitter renders are reversed from the GeoJSON specification
        (GeoJSON specifies a longitude then a latitude, whereas we are currently
        representing it as a latitude then a longitude). Our JSON renders as:
        -------------
        "geo": { "type":"Point", "coordinates":[37.78029, -122.39697] }
        
        Contributors
        If there are no contributors for a Tweet, then there will be an empty or
        "contributors" : {}. This field will only be populated if the user has
        contributors enabled on his or her account -- this is a beta feature tha
        is not yet generally available to all.
        This object contains an array of user IDs for users who have contributed
        to this status (an example of a status that has been contributed to is this
        one). In practice, there is usually only one ID in this array. The JSON
        renders as such
        -------------
        "contributors":[8285392].
      queryParameters: 
        include_my_retweet: 
          description: |
            When set to either true, t or 1, any Tweets returned that have been
            retweeted by the authenticating user will include an additional
            current_user_retweet node, containing the ID of the source status for
            the retweet.
          enum: 
            - 0
            - 1
            - true
            - false
            - ""
            - f
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-show-id-example.json
  /firehose{mediaTypeExtension}: 
    type: base
    get: 
      is: [ canBeDelimeted ]
      description: |
        This endpoint requires special permission to access.
        Returns all public statuses. Few applications require this level of access.
        Creative use of a combination of other resources and various access levels
        can satisfy nearly every application use case.
      queryParameters: 
        count: 
          description: |
            The number of messages to backfill. See the count parameter documentation
            for more information.
          type: integer
          example: 10
      responses: 
        200: 
          description: Example is not provided by twitter docs.
  /retweet/{id}{mediaTypeExtension}: 
    type: tweetsType
    uriParameters: 
      id: 
        description: The numerical ID of the desired status.
        type: integer
    post: 
      is: [ canTrimUser ]
      description: |
        Retweets a tweet. Returns the original tweet with retweet details embedded.
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-retweet-id-example.json 
  /filter{mediaTypeExtension}: 
    type: base
    post: 
      description: |
        Returns public statuses that match one or more filter predicates. Multiple
        parameters may be specified which allows most clients to use a single connection
        to the Streaming API. Both GET and POST requests are supported, but GET requests
        with too many parameters may cause the request to be rejected for excessive URL
        length. Use a POST request to avoid long URLs.
        The track, follow, and locations fields should be considered to be combined
        with an OR operator. track=foo&follow=1234 returns Tweets matching "foo" OR
        created by user 1234.
        The default access level allows up to 400 track keywords, 5,000 follow userids
        and 25 0.1-360 degree location boxes. If you need elevated access to the Streaming
        API, you should explore our partner providers of Twitter data here.
        Note: At least one predicate parameter (follow, locations, or track) must be specified.
      body: 
        application/x-www-form-urlencoded: 
          formParameters: 
            follow: 
              description: |
                A comma separated list of user IDs, indicating the users to return
                statuses for in the stream. See the follow parameter documentation for
                more information.
            track: 
              description: |
                Keywords to track. Phrases of keywords are specified by a comma-separated
                list.
            locations: 
              description: Specifies a set of bounding boxes to track.
            delimited: 
              description: Specifies whether messages should be length-delimited.
            stall_warnings: 
              description: Specifies whether stall warnings should be delivered.
              enum: 
                - 0
                - 1
                - true
                - false
                - ""
                - f
      responses: 
        200: 
          description: Example is not provided by twitter docs.
  /retweets_of_me{mediaTypeExtension}: 
    type: tweetsType
    get: 
      is: [ nestedable , trimmable , limitableById , limitableByCount: { max: 100 } ]
      description: |
        Returns the most recent tweets authored by the authenticating user tha
        have been retweeted by others. This timeline is a subset of the user's GET
        statuses/user_timeline.
      queryParameters: 
        include_user_entities: 
          description: The user entities node will be disincluded when set to false.
          type: boolean
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-retweets_of_me-example.json
  /home_timeline{mediaTypeExtension}: 
    type: tweetsType
    get: 
      is: [ nestedable , trimmable , limitableById , contibutorCanBeDetailed , limitableByCount: { max: 200 } , canExcludeReplies ]
      description: |
        Returns a collection of the most recent Tweets and retweets posted by the
        authenticating user and the users they follow. The home timeline is central
        to how most users interact with the Twitter service.
        Up to 800 Tweets are obtainable on the home timeline. It is more volatile
        for users that follow many users or follow users who tweet frequently.
        See Working with Timelines for instructions on traversing timelines efficiently.
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-home_timeline-example.json 
  /user_timeline{mediaTypeExtension}: 
    type: tweetsType
    get: 
      is: [ trimmable , acceptsUser , limitableById , contibutorCanBeDetailed , limitableByCount: { max: 200 } , canExcludeReplies ]
      description: |
        Returns a collection of the most recent Tweets posted by the user indicated
        by the screen_name or user_id parameters.
        User timelines belonging to protected users may only be requested when the
        authenticated user either "owns" the timeline or is an approved follower of
        the owner.
        The timeline returned is the equivalent of the one seen when you view a user's
        profile on twitter.com.
        This method can only return up to 3,200 of a user's most recent Tweets. Native
        retweets of other statuses by the user is included in this total, regardless
        of whether include_rts is set   to false when requesting this resource.
      queryParameters: 
        include_rts: 
          description: |
            When set to false, the timeline will strip any native retweets (though
            they will still count toward both the maximal length of the timeline
            and the slice selected by the count parameter). Note: If you're using
            the trim_user parameter in conjunction with include_rts, the retweets
            will still contain a full user object.
          type: boolean
      responses: 
        200: 
          body: 
            application/json: 
              example: !include examples/statuses-user_timeline-example.json 
documentation: 
  - title: Headline
    content: !include docs/api/headline.md